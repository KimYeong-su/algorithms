
알고리즘의 정의
1. 유한한 단계를 통해 문제를 해결하기 위한 절차나 방법
2. 컴퓨터가 어떤 일을 수행하기 위한 단계적 방법
3. 어떠한 문제를 해결하기 위한 절차

문제 해결에서 중요한 요소
1. 문제 해결과정을 단계별로 나누는 것
2. 문제를 올바로 이해하는 것이 중요

프로그래밍을 통한 문제해결
1. 문제를 읽고 이해한다
2. 문제를 익숙한 용어로 재정의한다
3. 어떻게 해결할지 계획을 세운다
4. 계획을 검증한다.
5. 프로그램으로 구현한다

문제 해결 전략
1. 이전에 경험한 비슷한 문제 응용하기
2. 단순하게 시작하기
	- 가장 단순한 알고리즘으로 시작 -> 최적화를 적용한 점진적 개선
3.문제를 단순화하기
	- 계산해야 하는 변수를 줄이거나 다차원을 저차원으로 표현
4. 그림으로 표현하기

알고리즘의 일반적인 특성
1. 정확성
	- 알고리즘은 주어진 이력에 대해 올바른 해를 주어야 함
2. 수행성
	- 알고리즘의 각 단계는 컴퓨터에서 수행 가능하여야 함
3. 유한성
	- 알고리즘은 유한 시간 내에 종료되어야 함
4. 효율성
	- 알고리즘은 효율적일수록 그 가치가 높아짐

Big-O Notation
1. 주어진 함수에서 가장 빨리 증가하는 항만 고려
2. 계수는 생략하여 표시
3. 가장 큰 영향력을 주는 항만 선택하여 고려

버블정렬
1. 데이터 집합을 순회하면서 집합 내의 이웃 요소들 끼리의 교환을 통해 정렬
2. 인접한 두개의 원소를 비교하여 자리를 계속 교환하는 방식
3. 정렬 과정
	- 첫번째 원소부터 인접한 원소끼리 계속 자리를 교환하면서 맨 마지막 자리까지 이동
	- 한 단계가 끝나면 가장 큰 원소가 마지막 자리로 정렬됨
	- 교환하며 자리를 이동하는 모습이 물 위에 올라오는 거품 모양과 같다고 하여 버블 정렬이라고 함

카운팅 정렬
1. 항목들의 순서를 결정하기 위해 집합에 각 항목이 몇개씩 있는지 세는 작업을 하여, 선형 시간에 정렬하는 효율적인 알고리즘
2. 제한사항
	- 정수나 정수로 표현할 수 있는 자료에 대해서만 적용가능
	  -- 각 항목의 발생 횟수를 기록하기 위해, 정수 항목으로 인덱스 되는 가운트들의 배열을 사용하기 때문
	- 카운트들을 위한 충분한 공간을 할당하려면 집합 내의 가장 큰 정수를 알아야함